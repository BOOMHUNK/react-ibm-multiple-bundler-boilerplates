{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "ES6"], // This option defines the set of type definitions for built-in JavaScript APIs and browser environments that should be included in the compilation. In this case, it includes DOM, DOM iterable, and ESNext (the highest version supported by your TypeScript version)
    "allowJs": true,
    // "skipLibCheck": true,
    "esModuleInterop": true, // This option enables a more compatible module import/export behavior, allowing default imports from modules with no default export.
    "allowSyntheticDefaultImports": true, //This option allows default imports from modules that don't have a default export. This is related to the esModuleInterop option.
    "strict": true, //This option enables all strict type-checking options, ensuring that your code adheres to stricter type rules
    "forceConsistentCasingInFileNames": true, // This option enforces consistent casing in file names, preventing issues that may arise due to case-sensitive file systems.

    "module": "ES6", // This option specifies the module code generation format. In this case, it is set to ESNext, which means the latest module format supported by your TypeScript version.

    "moduleResolution": "node", // This option ensures that each file is treated as a separate module, preventing issues that may arise from cross-file dependencies.

    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true, // This option disables emitting output files like JavaScript source code, source maps, or declarations. It is useful when you want to use TypeScript only for type checking and editor integration, leaving the transpilation process to another tool like Babel or swc.

    "outDir": "./dist/",
    "noImplicitAny": true,
    "jsx": "react-jsx"
  },
  "include": ["src"]
}
